# -*- coding: utf-8 -*-
"""Welcome To Colaboratory

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/notebooks/intro.ipynb
"""

import numpy as np

class LIFNeuron:
    def __init__(self, weights, bias):
        self.weights = weights
        self.bias = bias
        self.activation = 0.0
        self.threshold = 1.0
        self.leak = 0.1
        self.membrane_potential = 0.0
        self.fired = False

    def update(self, inputs):
        self.membrane_potential = self.leak * self.membrane_potential + np.dot(inputs, self.weights) + self.bias

        if self.membrane_potential > self.threshold:
            self.activation = 1.0
            self.fired = True
        else:
            self.activation = 0.0

class LIFNetwork:
    def __init__(self, layer_sizes):
        self.layers = []
        self.num_layers = len(layer_sizes)

        for i in range(self.num_layers):
            layer = []
            num_neurons = layer_sizes[i]
            for _ in range(num_neurons):
                if i == 0:
                    weights = np.random.randn(layer_sizes[i])  # Randomly initialize weights for input layer
                else:
                    weights = np.random.randn(layer_sizes[i-1])  # Randomly initialize weights for other layers
                bias = np.random.randn()
                neuron = LIFNeuron(weights, bias)
                layer.append(neuron)
            self.layers.append(layer)

    def update(self, inputs):
        layer_inputs = inputs

        for layer in self.layers:
            layer_outputs = []
            for neuron in layer:
                neuron.update(layer_inputs)
                layer_outputs.append(neuron.activation)
            layer_inputs = np.array(layer_outputs)

    def print_state(self):
        for i, layer in enumerate(self.layers):
            print(f"Layer {i+1}:")
            for j, neuron in enumerate(layer):
                status = "Fired" if neuron.fired else "Inactive"
                print(f"Neuron {j+1}: {status}")

# Create the network with layer sizes [2, 3, 1]
network = LIFNetwork([2, 3, 1])

# Set the example input
inputs = np.array([0.5, 0.2])

# Update the network with the inputs
network.update(inputs)

# Print the state of the neurons
network.print_state()